# 继承
1. 作用：为了实现代码复用。
2. 通过extends关键字进行继承。
3. 超类/父类：共有的属性和行为；派生类/子类：特有的属性和行为
    派生类可以访问超类和派生类的，超类/父类不能访问派生类。
4. 一个超类可以有多个派生类，但一个派生类只能有一个超类，称为单继承。
5. 继承具有传递性。
6. 继承要符合is（属于）的关系。
7. 继承的是父类的**全部的**成员变量和普通方法，但是不能直接访问private的变量和方法，可以通过父类设置一个public的方法来访问private的变量和方法。

    不包括构造方法，父类的构造方法通过super（）来调用。

**泛化：抽出共有特性，从程序设计角度而言叫泛化，从代码实现角度而言叫继承。**

---
## super

作用：指代当前对象的超类对象

用法：

1. super.成员变量名：访问类的成员变量
2. super.方法名()：调用超类的成员方法
3. super()：访问超类的构造方法
---
## 构造方法

java规定，构造派生类之前必须构造超类。

为了保证这个规则，java做了两种操作：

1. 在派生类的构造方法中，如果没有调用超类构造方法，默认super（）调用超类的无参构造方法

    注：super（）必须位于派生类构造方法的第一行。
2. 如果在派生类的构造方法中调用了超类的构造方法，则不再默认提供。

**超类中共有的成员变量在超类中使用构造函数初始化，派生类独有的成员变量在自己的构造函数中初始化。派生类构造函数中首先使用super（）来调用超类构造函数初始化超类成员变量。**

---
## 方法重写

override

子类重写父类方法，方法名相同，参数列表相同，只有方法体不同。

重写方法被调用时，看对象的类型--------new谁就调谁的。

### 方法重写的访问修饰符

**重写的方法访问权限必须大于等于超类的方法。（接口、父类都是如此）**

1. 子类方法的访问修饰符与父类方法相同：子类方法可以使用与父类方法相同的访问修饰符，或者更宽松的访问修饰符。例如，如果父类方法是 `public`，则子类方法可以是 `public`、`protected` 或默认（无修饰符）。
2. 子类方法的访问修饰符比父类方法更宽松：子类方法可以使用比父类方法更宽松的访问修饰符。例如，如果父类方法是 `protected`，则子类方法可以是 `public`。
3. 子类方法的访问修饰符比父类方法更严格：子类方法不能使用比父类方法更严格的访问修饰符。例如，如果父类方法是 `public`，则子类方法不能是 `private`。

---
### final

表示最终的、不可改变的，单独应用几率低

特点：

1.修饰变量，表示变量不能被改变

2.修改方法，表示方法不能被重写

3.修饰类：表示类不能被继承

---
