## 面向过程和面对对象

* 面向过程：以方法为单位来解决问题，比较适合简单的业务
* 面向对象：以对象为单位来解决问题，适合复杂的业务

OOA：面向对象分析

OOD：面向对象设计

OOAD：面向对象分析与设计

OOP：面向对象编程

**高质量代码：复用性好、扩展性好、移植性好、维护性好、可读性好、健壮性好、效率好**

**面向对象三大特征：封装、继承、多态**

---

## 方法

也称函数、过程

* 作用：封装一段特定的业务逻辑功能
* 建议：尽可能独立，一个方法只做一件事
* 调用：可以被反复调用
* 好处：减少代码重复，有利于代码维护

何时用：只要是一个独立的功能，就应封装到一个方法中

---
### main方法

作为程序的入口，因此想使用某方法必须写在main方法里。

可以直接调用静态方法，调用非静态方法，需要通过类的对象来调用

---

### 方法调用

1.实例方法：需要创建一个对象，才能调用方法

2.静态方法：由static修饰，不需要创建对象，直接通过类名.方法调用

3.构造方法：在创建对象的时候自动调用

---

### 声明

修饰符 返回值类型 方法名（参数列表）{

方法体

}

---
### 返回值

方法可以有返回值，也可以没有返回值

方法执行完之后，若还需要用到方法中的数据，那就有返回值。

有返回值时return必须跟一个数据，且与返回值类型匹配。（1）结束方法的执行（2）返回结果给调用方

```
return;//这种写法直接结束方法，只能用于无返回值。
```

---
### 参数

形参：形式参数，定义方法时的参数为形参

实参：实际参数，调用方法时的参数为实参

---

## 方法重载 overload

发生在同一类中，方法名相同，参数列表不同，方法体不同，与返回值无关。

编译器根据方法的签名自动绑定方法。签名：方法名+参数列表

方便同一方法使用不同参数，输出不同的结果。

例子：

```
System.out.println();
System.out.println(int a );
System.out.println(String a );
```

---
