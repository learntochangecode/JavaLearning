## 类

类是一种引用数据类型

* 现实生活是由很多很多对象组成的，基于对象抽出了类
* 对象：软件中真实存在的单个的个体/东西
  类：类型/类别，代表一类个体
* 类是对象的模子/模板，对象是类的具体的实例，可以将类理解为类别/模子/图纸
* 类中可以包含：

  * 对象的属性/特征/数据----------------------成员变量
  * 对象的行为/动作/功能----------------------方法
* 一个类可以创建多个对象
---
### 类的声明

1.对象的属性/特征/数据，设计为成员变量

2.对象的行动/动作/功能，设计为方法

class 类名{

	成员变量类型 变量名称；

	修饰符 返回值类型 方法名（参数列表）{

		方法体

	}

}

---
### 类间关系

* 类和类——继承
* 接口和接口——继承
* 类和接口——实现

---
### 代码块

{}代码块，初始化


**静态代码块**

```
public class MyClass {
    // 静态代码块
    static {
        // 执行的代码
    }
}
```
由于静态代码块只在类加载时执行一次，因此它常用于进行一些全局的初始化操作，如初始化静态变量或加载配置文件等。

1.调用静态方法

2.初始化静态变量

---
### 内部类

成员内部类、局部内部类、匿名内部类

---
## 对象

类定义完成后，可以使用new关键字创建对象。创建对象的过程称为实例化。

```
Student xiaoming = new Student();
//xiaoming是引用类型变量，简称引用;“=”为指向;new Student()，创建一个Student类型的对象。
//创建一个引用变量xiaoming，指向新的Student类型对象。
```

创建对象时，会给类中成员变量赋默认值。

* 整数类型byte short int long的默认值是 0
* 浮点类型float double 的默认值是 0.0
* char字符的默认值是**'\u0000'**
* 布尔boolean默认值是false
* 引用类型默认值是**null**
---
### this关键字

this关键字只能用在方法中，方法中访问成员变量前默认有this.

this指代当前对象，哪个对象调用方法，它指的就是哪个对象。

this.成员变量名——访问成员变量（普通方法访问其他方法、成员变量时无须使用 this 前缀，但如果方法里有个**局部变量和成员变量同名**，但程序又需要在该方法里访问这个**被覆盖的成员变量**，则必须使用 this 前缀。）

this.方法名()——调用方法（让类中一个方法，访问该类里的另一个方法；Java 允许对象的一个成员方法直接调用另一个成员方法，即可以省略 this 前缀。）

this()——调用构造方法

```
 public Student(String name) {
        this.name = name;
    }
```
---
