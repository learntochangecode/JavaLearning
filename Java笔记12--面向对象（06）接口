# 接口 interface

* 接口是一种引用数据类型，由interface定义。
* 只能包含抽象方法、常量、默认方法、静态方法、私有方法。 接口中方法默认都是抽象的，默认有abstract，可以省略。
* 不能被实例化
* 接口需要被实现，实现类：必须重写接口中的所有抽象方法。
* 一个类可以实现多个接口，用逗号分隔。若又继承又实现时，应先继承后实现
* 接口可以继承接口
* 接口中成员的默认权限为public，重写方法时要求访问权限必须大于等于超类的。

接口中可以有抽象方法、常量、default修饰的默认方法、静态方法、private。

1.抽象方法可以用public、默认修饰，没有方法体。

2.默认方法用default修饰，必须有方法体。

3.静态方法用static修饰，必须有方法体。

## 匿名内部类 Anonymous

new 父类/接口（参数列表）{}.method();

匿名内部类是指在使用内部类时，通过直接创建一个没有名字的子类对象的方式来实现。它没有显式地定义一个类，而是在需要的地方直接创建一个子类对象，并重写其中的方法。

使用匿名内部类可以方便地在代码中定义并实现一个简单的类，通常用于需要实现某个接口或继承某个类的情况下。

```
public interface MyInterface {
    void doSomething();
}

public class MyClass {
    public static void main(String[] args) {
        // 使用匿名内部类创建实现了MyInterface接口的对象
        MyInterface obj = new MyInterface() {
            @Override
            public void doSomething() {
                System.out.println("Doing something in anonymous inner class.");
            }
        };

        // 调用接口方法
        obj.doSomething();
    }
}
```
