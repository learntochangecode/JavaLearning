# 网络编程

## 网络应用模型

* **C/S**：这里的C是指**Client**，即客户端。而S是指**Server**，即服务端。网络上的的应用本质上就是两台计算机上的软件进行交互。而客户端和服务端就是对应的两个应用程序，即客户端应用程序和服务端应用程序
* **B/S**：这里的B是**Browser**，即浏览器，而S是指**Server**。浏览器是一个通用的客户端，可以与不同的服务端进行交互。但是本质上B/S还是C/S结构，只不过浏览器是一个通用的客户端而已。

## 可靠传输与不可靠传输

TCP协议与UDP协议都是**传输协议**，客户端程序与服务端程序基于这些协议完成网络间的数据交互。

* TCP是可靠传输协议，是面向连接的协议，保证数据传输中的可靠性和完整性。
  TCP保证可靠传输，但是传输效率低，占用带宽高。
* UDP是不可靠传输协议，不保证数据传输的完整性。
  UDP不保证可靠传输，但是传输速度块，占用带宽小。

### TCP三次握手与四次挥手

三次握手：客户端与服务端建立连接。

[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ShQWqc8d-1684756070857)(assets/image-20230522105410-ksck5tr.png)]


断开连接四次挥手

[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-AFvbJKI1-1684756070857)(assets/image-20230522193847-br92mo9.png)]

## Socket与ServerSocket

* **java.net.Socket**(套接字)封装了**TCP**协议的通讯细节，我们使用它可以与服务端建立网络链接，并通过它获取两个流(一个输入一个输出)，然后使用这两个流的读写操作完成与服务端的数据交互
* **java.net.ServerSocket**
* ServerSocket运行在服务端，作用有两个:

  * 向系统申请服务端口，客户端的Socket就是通过这个端口与服务端建立连接的。
  * 监听服务端口，一旦一个客户端通过该端口建立连接则会自动创建一个Socket，并通过该Socket与客户端进行数据交互。

实例化Socket时要传入两个参数
 参数1:服务端的地址信息，可以是IP地址，如果链接本机可以写"localhost"
 参数2:服务端开启的服务端口，我们通过IP找到网络上的服务端计算机，通过端口链接运行在该机器上的服务端应用程序。
实例化的过程就是链接的过程，如果链接失败会抛出异常:
 java.net.ConnectException: Connection refused: connect

### Socket提供了两个重要的方法:

* **OutputStream getOutputStream()**
  该方法会获取一个字节输出流，通过这个输出流写出的字节数据会通过网络发送给对方。
* **InputStream getInputStream()**
  通过该方法获取的字节输入流读取的是远端计算机发送过来的数据。

[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-KG7KyWHj-1684756070858)(assets/image-20230522193537-wgicyyb.png)]

#### 需要注意的几个点:

* 当客户端不再与服务端通讯时，需要调用socket.close()断开链接，此时会发送断开链接的信号给服务端。这时服务端的br.readLine()方法会返回null，表示客户端断开了链接。
* 当客户端链接后不输入信息发送给服务端时，服务端的br.readLine()方法是出于阻塞状态的，直到读取了一行来自客户端发送的字符串。


## 多客户端链接

**只有第一个连接的客户端可以与服务端说话。**

原因:

服务端只调用过一次accept方法，因此只有第一个客户端链接时服务端接受了链接并返回了Socket,此时可以与其交互。

而第二个客户端建立链接时，由于服务端没有再次调用accept，因此无法与其交互。


```
 public void start(){
        try {
            while(true) {
                System.out.println("等待客户端链接...");
                /*
                    ServerSocket提供了接受客户端链接的方法:
                    Socket accept()
                    这个方法是一个阻塞方法，调用后方法"卡住"，此时开始等待客户端
                    的链接，直到一个客户端链接，此时该方法会立即返回一个Socket实例
                    通过这个Socket就可以与客户端进行交互了。

                    可以理解为此操作是接电话，电话没响时就一直等。
                 */
                Socket socket = serverSocket.accept();
                System.out.println("一个客户端链接了！");
                /*
                    Socket提供的方法:
                    InputStream getInputStream()
                    获取的字节输入流读取的是对方计算机发送过来的字节
                 */
                InputStream in = socket.getInputStream();
                InputStreamReader isr = new InputStreamReader(in, "UTF-8");
                BufferedReader br = new BufferedReader(isr);

                String message = null;
                while ((message = br.readLine()) != null) {
                    System.out.println("客户端说:" + message);
                }
```

**添加循环操作后，发现依然无法实现。**

原因在于:

外层的while循环里面嵌套了一个内层循环(循环读取客户端发送消息)，而循环执行机制决定了里层循环不结束，外层循环则无法进入第二次操作。

## 多线程

### 概念

* #### 线程:一个顺序的单一的程序执行流程就是一个线程。代码一句一句的有先后顺序的执行。
* #### 多线程:多个单一顺序执行的流程并发运行。造成"感官上同时运行"的效果。
* #### 并发:

  多个线程实际运行是走走停停的。线程调度程序会将CPU运行时间划分为若干个时间片段并

  尽可能均匀的分配给每个线程，拿到时间片的线程被CPU执行这段时间。当超时后线程调度

  程序会再次分配一个时间片段给一个线程使得CPU执行它。如此反复。由于CPU执行时间在

  纳秒级别，我们感觉不到切换线程运行的过程。所以微观上走走停停，宏观上感觉一起运行

  的现象成为并发运行!
* #### 用途:

  * 当出现多个代码片段执行顺序有冲突时，希望它们各干各的时就应当放在不同线程上"同时"运行
  * 一个线程可以运行，但是多个线程可以更快时，可以使用多线程运行

### 线程的生命周期图

[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-PPvjA0e3-1684756070859)(assets/image-20230522194205-ayiiqvw.png)]

### 线程的创建

1. 继承Thread并重写run方法
2. 单独定义线程任务

### 创建方式一

#### **继承Thread并重写run方法**

定义一个线程类，重写run方法，在其中定义线程要执行的任务(希望和其他线程并发执行的任务)。

注:启动该线程要调用该线程的start方法，而不是run方法！

这种方式的优点:结构简单，利于匿名内部类创建
缺点:
1:存在继承冲突问题，由于java是单继承的，这导致如果我们继承了Thread就无法再
继承其他类去复用方法。这在实际开发中是极其不方便的
2:当我们继承Thread并重写run方法，在run方法中定义线程要执行的任务。这会导致
线程与任务存在一个必然的耦合关系，不利于线程的重用。

### 创建方式二

**实现Runnable接口单独定义线程任务**

```
public class ThreadDemo2 {
    public static void main(String[] args) {
        //1创建线程要执行的任务
        Runnable r1 = new MyRunnable1();
        Runnable r2 = new MyRunnable2();
        //2创建线程
        Thread t1 = new Thread(r1);
        Thread t2 = new Thread(r2);
        //3启动
        t1.start();
        t2.start();
    }
}
class MyRunnable1 implements Runnable{
    public void run(){
        for (int i = 0; i < 1000; i++) {
            System.out.println("疯狂星期四");
        }
    }
}
class MyRunnable2 implements Runnable{
    public void run(){
        for (int i = 0; i < 1000; i++) {
            System.out.println("V我50!");
        }
    }
}
```

## 主线程

**java中的代码都是靠线程运行的，执行main方法的线程称为&quot;主线程&quot;。**

线程提供了一个静态方法:

* static Thread currentThread()
  该方法可以获取运行这个方法的线程

### 使用多线程实现多客户端连接服务端

因为需要处理多客户端，所以服务端要循环调用accept方法，但该方法会产生阻塞，且读取客户端的消息也是依靠一个循环完成的，这会导致它接近是一个死循环，不结束的话也会影响服务端再次调用accept方法。所以与某个客户端的交互就需要使用线程来并发处理。

```
  public void start(){
        try {
            /*
                ServerSocket的一个重要方法:
                Socket accept()
                该方法用于接受客户端的连接。这是一个阻塞方法，调用后会"卡住"，直到
                一个客户端与ServerSocket连接，此时该方法会立即返回一个Socket实例
                通过这个Socket实例与该客户端对等连接并进行通讯。
                相当于"接电话"的动作
             */
            while(true) {
                System.out.println("等待客户端连接...");
                Socket socket = serverSocket.accept();
                System.out.println("一个客户端连接了!");
                //启动一个线程负责与该客户端交互
                ClientHandler handler = new ClientHandler(socket);
                //创建线程
                Thread t = new Thread(handler);
                //启动线程
                t.start();

            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

private class ClientHandler implements Runnable{
        private Socket socket;

        public ClientHandler(Socket socket){
            this.socket = socket;
        }

        public void run(){
            try {
                InputStream in = socket.getInputStream();
                InputStreamReader isr = new InputStreamReader(in, StandardCharsets.UTF_8);
                BufferedReader br = new BufferedReader(isr);
                String line;
                while ((line = br.readLine()) != null) {
                    System.out.println("客户端说:" + line);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
```
