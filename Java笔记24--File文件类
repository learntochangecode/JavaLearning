# File文件类

## 创建File类

`​  File file = new File("./demo.txt");`

使用相对路径而不是绝对路径，因为存在跨平台问题。

./表示当前目录。

## getName()方法

`String getName`以String返回文件名

## length()方法

`long length`以字节返回文件大小

```
long len = file.length();
```

## canRead()方法

`​ boolean cr = file.canRead();`

## canWrite()方法

`boolean cw = file.canWrite();`

## isHidden()方法

`boolean hidden = file.isHidden();`

## 创建文件方法

`boolean createNewFile()`，当且仅当File表示的路径下不存在且实际创建出该文件时返回true

`​ File file = new File("./test.txt");`

## 创建文件方法

`boolean exists()`，判断当前路径下是否存在该文件或目录，如果存在则返回true

```
if(file.exists()){
            System.out.println("该文件已存在");
        }else {
            file.createNewFile();
            System.out.println("创建完毕");
        }
```

## 删除文件方法

`boolean delete()`，删除当前路径下文件或目录，成功返回true

```
 //相对路径中"./"可以忽略不写，默认从"./"开始
        for(int i=1;i<101;i++){
            File file = new File("test"+i+".txt");
            file.delete();
        }
```

## 创建目录方法

`mkdir是linux中的一个命令，用于创建一个目录`

`boolean mkdir()`，当且仅达目录创建成功时返回true，缺点：如果有不存在的目录则无法创建

```
File dir = new File("./demo");
dir.mkdir();
System.out.println("创建完毕");
```

`mkdirs()`创建指定目录时，自动把不存在的目录一同创建。

```
        File dir = new File("./a/b/c/d/e");
        dir.mkdir();
        System.out.println("创建完毕");
```

## 删除目录方法

delete方法在删除目录时要求必须是空目录，否则删除失败。

1.保证程序的健壮性，防止：出现了一个不致命的问题，却导致整个系统崩溃。
2.两大类，Error（Jvm 无法解决的严重问题，StackOverFlow/out of memory）和 Exception（编程错误或偶然外在因素导致的一般性问题，如空指针访问，网络连接中断），分为编译时异常和运行时异常。
2.快捷键：选中代码块，按 ctrl+alt+t
两种方式：1.try-catch-finall 2.throws+ 异常类型
