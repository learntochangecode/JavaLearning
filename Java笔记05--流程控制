
# 流程控制

**任何复杂的程序逻辑，都可以通过三种结构来实现：**

* **顺序结构：从上往下逐行执行，每句必执行**
* **分支结构：有条件地执行某个语句**
* **循环结构：有条件地执行某个语句多次**
---
## 分支结构

### if结构

```
if(){
语句块
}
```

若（）为true，则执行语句块；若为false，直接结束。

---
### if else结构

```
if(){
语句块1
}else{
语句块2
}
```

若为true，则执行语句块1，结束；若为false，则执行语句块2，结束。

---
### switch case结构 

多分支选择语句

```
switch (表达式)
{
    case 常量表达式1：    语句1
    case 常量表达式2：    语句2
       ┇
    case 常量表达式n：    语句n
    default:        语句n+1
}
```

* switch 后面括号内的“表达式”必须是整数类型，可以是char 型变量、String和枚举类。
* 执行完一个case后面的语句后，流程控制转移到下一个case继续执行。
* 一个case后加break跳出switch语句。
---
## 循环结构

反复执行一段相同的代码。

循环三要素：循环变量的初始化，循环条件，循环变量的改变

### break关键字

break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。

break 跳出最里层的循环，并且继续执行该循环下面的语句。

### continue 关键字

continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。

在 for 循环中，continue 语句使程序立即跳转到更新语句。

在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。

### for结构

与次数有关的循环

### while结构

先判断后执行，有可能一次都不执行。

判断（）的值，为true则执行；再判断（）的值，为true则执行；一直循环直到为false...

使用break可以跳出循环

### do...while结构

先执行后判断，至少执行一次。

先执行，再判断（）的值，为true则执行；再判断（）的值，为true则执行；一直循环直到为false...

使用break可以跳出循环

---
