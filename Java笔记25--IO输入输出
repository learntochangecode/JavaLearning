# I/O

IO:Input和Output，即输入与输出。

输入是从外界到程序中的方向，是我们程序用于获取外界信息的过程，是“读”的过程。

输出是从程序到外界的方向，是我们程序向外界发送信息的过程，是“写”的过程。

输入流与输出流：是程序与外界的一根管道，用于传输数据，数据以字节的形式传输。

InputStream和OutputStream是两个超类，抽象类，Java中用于实际读写数据的流都继承自它们。

java.io.FileInputStream和FileOutputStream

这两个流都继承自InputStream和OutputStream，用于读写文件数据

常见的构造方法：

FileOutputStream(File file)

FileOutputStream(String path)

注：如果指定的文件不存在，文件流会自动创建它，前提是该文件所在目录要存在

## 字节读写

### 写入

`FileOutputStream fos = new FileOutputStream("path");`

`void write(int a)`，写入二进制形式的低八位

### 读取

`FileInputStream fis = new FileInputStream("path");`

`void read(int a)`，读取1个字节到程序中，返回的int值的二进制形式的低八位有效。如果返回的int值直接表示位整数-1，则表示流读取到了末尾EOF

### 复制

```
FileInputStream fis = new FileInputStream("./1.jpeg");
FileOutputStream fos = new FileOutputStream("./1copy.jpeg");
int d = 0;
//只要没到文件末尾就一直复制
while((d=fis.read())!=-1){
    fos.write(d);
}
System.out.println("复制完毕");
fos.close();
fis.close();
```


```
long start = System.currentTimeMillis();//以long类型返回当前系统时间，UTC时间
//UTC:世界协调时，自1970-01-01 00：00：00到当前时间所经过的毫秒
```

## 利用块读写提高读写效率

```
FileInputStream fis = new FileInputStream("./1.jpeg");
FileOutputStream fos = new FileOutputStream("./3.jpeg");
byte[] data = new byte[1024*10];
int len = 0;
        long start = System.currentTimeMillis();
        while((len=fis.read(data))!= -1){
            fos.write(data);
        }
 long end = System.currentTimeMillis();
System.out.println("复制完毕！耗时"+(end-start)+"ms");
 fis.close();
fos.close();
```

### 将字符串转换成byte数组（utf-8编码）进行输出

`byte[] data = line.getBytes(StandardCharsets.UTF_8);`

```
//获取用户输入的字符串，并且写入note.txt
public class NoteDemo {
    public static void main(String[] args) throws IOException {
        FileOutputStream fos = new FileOutputStream("note.txt");
        Scanner sc = new Scanner(System.in);
        String input;
	System.out.println("请输入字符串，输入exit时结束输入");
         while (!("exit".equalsIgnoreCase(input = sc.nextLine()))){
            byte[] inputBytes = input.getBytes(StandardCharsets.UTF_8);
            fos.write(inputBytes);
        }
        fos.close();
	System.out.println("输出已结束！");
    }
}
```
