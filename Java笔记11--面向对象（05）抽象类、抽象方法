# 抽象类、抽象方法

## 1.设计规则

* 将所有派生类共有的属性和行为，抽到超类中——抽共性
* 若派生类的行为/代码都一样，设计为普通方法

  若派生类的行为/代码不一样，设计为抽象方法
* 将部分派生类共有的行为，抽到接口中

  * 接口是对单继承的扩展
  * 接口是一种标准、规范，若实现了某接口就是具备了某个功能

## 2.抽象类的要求

* 包含抽象方法的类必须是抽象类。
* 由abstract修饰
* 由abstract修饰的抽象类不能被实例化（new对象）
* 不包含抽象方法的类也可以声明为抽象类，同样不能被实例化
## 3.抽象方法
抽象方法通过在方法声明前面加上"abstract"关键字来定义。

它是指在父类（或接口）中声明的方法，但没有具体的实现代码。抽象方法只包含方法的签名（方法名、参数列表和返回类型），而没有方法体。具体的实现由继承或实现该抽象方法的子类提供。

`public void abstractMethod();`
## 4.抽象类的使用

抽象类是需要被继承的，派生类有两种处理方法：

* 也声明为抽象类，一般很少这么做
* 必须重写所有抽象方法

## 4.抽象类的意义

1. 封装共有的属性和行为，实现代码复用。
2. 可以包含抽象方法，为所有派生类统一入口（名字统一），**强制必须重写**。


