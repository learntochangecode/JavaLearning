## 正则表达式

用来匹配文本中字符串的规则，Java和C++等其他语言都可以用。

### 正则表达式的语法

#### 1.[ ]

用来表示1个字符，[ ]中可以指定该字符的内容范围

例如，[abc]：该字符要么是a要么是b要么是c

[a-z]:"-"表示范围，a-z表示abcdefg....，

**[a-zA-Z]:任意一个字母**

**[0-9]:任意一个数字**

#### 2.预定义字符

\d:表示一个数字，等价于[0-9]

\s:表示一个空白字符，空格、缩进、回车

\w:表示一个单词字符（数字、字符、下划线）等价于[a-zA-Z0-9_]

. : 表示任意字符

**想表达原始含义，加一个\，如想表达一个点“.”,而不是任意字符，需要写作 \.**

#### 3.取反：

\D:表示不是数字

\\S:表示不是空白字符

\\W:表示不是单词字符

#### 4.量词：

+：表示它前面的内容出现（1次以上）

*：表示它前面的内容出现任意次

{n}：表示它前面的字符出现n次

{n,m}：表示它前面的字符出现n~m次，大于等于n，小于等于m

{n,}：表示它前面的字符出现n次以上，大于等于n

{0,m}：表示它前面的字符最多出现m次


#### 5.分组：

( )：可以将内容看作一个整体

(X | Y)：这个整体可以是X也可以是Y

(abc){3}：abc这个整体要出现3次


#### 6.边界匹配：

^:  ^出现在字符串最开始，表示字符串从这里开始

$:  表示字符串从这里结束

#### 7.案例：邮箱匹配

使用String的`matches()`方法来判断是否匹配

```
String email = "xxxxx@outlook.com";
String regex = "[a-zA-Z0-9_]+@[a-zA-Z0-9]+(\\.[a-zA-Z]+)+";
boolean match = email.matches(regex);
System.out.println(match?"是邮箱":"不是邮箱");
//是邮箱
```

### split()方法

将当前字符串满足正则表达式的部分进行拆分，删除匹配正则的地方，返回剩余部分。

```
String line = "abc123def456ghi789jkl";
String[] splitArray = line.split("[0-9]+");
System.out.println(Arrays.toString(splitArray));
//[abc, def, ghi, jkl]
```

拆分规则：如果字符串开始时出现可拆分项，则拆分出的第一个字符串为空字符串。

如果连续匹配到两个可拆分项，则中间会拆分出一个空字符串。

如果默认拆分出空字符串时，则会被忽略。

### replaceAll()方法
str.replaceAll(regex,"str");
将当前字符串中所有满足正则表达式的部分替换为给定的内容
