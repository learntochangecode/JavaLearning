# 包装类

## 是什么？

java定义了8个包装类,目的是为了解决基本类型不能直接参与面向对象开发的问题,使得基本类型可以通过包装类的实例以对象的形式存在.除了int-Integer，char-Character，其他包装类的名称就是把基本类型首字母大写。

* 其中数字类型的包装类都继承自java.lang.Number,而char和boolean的包装类直接继承自Object
* Number是一个抽象类,定义了一些方法,目的是让包装类可以将其表示的基本类型转换为其他数字类型.

## 基本类型转包装类

使用静态方法valueOf

```
int i = 123321;
Integer integer = Integer.valueOf(i);
System.out.println(integer.toString());
//JDK1.9之后官方不建议使用Integer integer = new Integer(i);的方法
```

使用valueOf的好处

Integer可以缓存-128~127的整数。

```
int i = 127;
Integer integer1 = Integer.valueOf(i);
Integer integer2 = Integer.valueOf(i);
System.out.println(integer1==integer2);
//true
```

## 包装类转基本类型

```
int i = integer1.intValue();
```

## 包装类常用功能

1可以通过包装类获取其表示的基本类型的取值范围

```
//获取int的最大值和最小值?
int imax = Integer.MAX_VALUE;
System.out.println(imax);
int imin = Integer.MIN_VALUE;
System.out.println(imin);
```

2字符串转换为基本类型的前提是，该字符串正确描述了基本类型可以保存的值，否则会抛出异常:NumberFormatException


## 自动拆装箱特性

DK5之后推出了一个新的特性:自动拆装箱

该特性是编译器认可的.当编译器编译源代码时发现有基本类型和引用类型相互赋值使用时会自动补充代码来完成他们的转换工作,这个过程称为自动拆装箱.

```
int i = new Integer(123);
//触发自动拆箱特性,编译器会补充代码将包装类转换为基本类型,下面的代码会变为:
int i = new Integer(123).intValue();

Integer in = 123;
//触发编译器自动装箱特性,代码会被编译器改为:
Integer in = Integer.valueOf(123);
```

## 进制转换


```
int j = Integer.parseInt("AA",16);
int k = Integer.valueOf("AA",16);
System.out.println(j + " "+k);

outcome:170 170
```

**valueOf的底层用的是parseInt**
